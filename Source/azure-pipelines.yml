#MIT License

#Copyright (c) 2021-2022 Peter Kirmeier

#Permission is hereby granted, free of charge, to any person obtaining a copy
#of this software and associated documentation files (the "Software"), to deal
#in the Software without restriction, including without limitation the rights
#to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
#copies of the Software, and to permit persons to whom the Software is
#furnished to do so, subject to the following conditions:

#The above copyright notice and this permission notice shall be included in all
#copies or substantial portions of the Software.

#THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
#IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
#FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
#AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
#LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
#OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
#SOFTWARE.

# https://aka.ms/yaml

trigger:
- xamarin

stages:
- stage: Build

#  variables:
#    projectfile: '**/*.$(Agent.JobName).csproj'

  jobs:
  - job:
    strategy:
      maxParallel: 4
      matrix:
        WindowsWPF:
          PlatformLayer: WPF
          OSLayer: Windows
          PoolVmImg: 'windows-latest'
        WindowsGTK:
          PlatformLayer: GTK
          OSLayer: Windows
          PoolVmImg: 'windows-latest'
        LinuxGTK:
          PlatformLayer: GTK
          OSLayer: Any
          PoolVmImg: 'ubuntu-latest'
        MacOsGTK:
          PlatformLayer: GTK
          OSLayer: Any
          PoolVmImg: 'macOS-latest'

    variables:
      projectfile: '**/*.$(PlatformLayer).csproj'
      buildConfiguration: 'Release'
      targetDirectory: '$(Build.SourcesDirectory)/Source/$(AssemblyProductAttribute).$(PlatformLayer)/bin/$(buildConfiguration)'

    pool:
      vmImage: '$(PoolVmImg)'

    steps:

    - task: NuGetToolInstaller@1
      displayName: NuGet Install

    - task: NuGetCommand@2
      displayName: NuGet Restore
      inputs:
        restoreSolution: '**/*.sln'

    - task: CmdLine@2
      displayName: GTK# Install (Windows)
      condition: and(eq(variables['OSLayer'], 'Windows'), eq(variables['PlatformLayer'], 'GTK'))
      inputs:
        script: |
          msiexec /i https://xamarin.azureedge.net/GTKforWindows/Windows/gtk-sharp-2.12.45.msi /quiet

    - task: CmdLine@2
      displayName: GTK# Install (Ubuntu)
      condition: eq(variables['PoolVmImg'], 'ubuntu-latest')
      inputs:
        script: |
          set -x
          sudo apt-get install gtk-sharp2

    - task: MSBuild@1
      displayName: Compile
      inputs:
        solution: '$(projectfile)'
        msbuildArchitecture: 'x64'
        platform: 'AnyCPU'
        configuration: '$(buildConfiguration)'
        clean: true
        logProjectEvents: true
        logFileVerbosity: 'detailed'

    - task: Bash@3
      displayName: 'Assembly Variables'
      env:
        ASSEMBLYFILE: '$(Build.SourcesDirectory)/Source/AssemblyInfo.cs'
      inputs:
        targetType: 'inline'
        script: |
          echo "Parsing '$ASSEMBLYFILE' ..."
          grep AssemblyVersionAttribute "$ASSEMBLYFILE" | tee    AssemblyInfoReport.txt | sed -e 's,[^\"]*\"\([^\"]*\)\".*,##vso[task.setvariable variable=AssemblyVersionAttribute]\1,g'
          grep AssemblyProductAttribute "$ASSEMBLYFILE" | tee -a AssemblyInfoReport.txt | sed -e 's,[^\"]*\"\([^\"]*\)\".*,##vso[task.setvariable variable=AssemblyProductAttribute]\1,g'
          cat AssemblyInfoReport.txt
          rm -f AssemblyInfoReport.txt

    - task: ArchiveFiles@2
      displayName: 'Archive $(Build.ArtifactStagingDirectory)'
      inputs:
        rootFolderOrFile: '$(targetDirectory)/'
        includeRootFolder: false
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.DefinitionName).$(System.JobName)-$(AssemblyVersionAttribute)-PreRelease.zip'


#- stage: Deploy
#  dependsOn: Build
#
# https://docs.microsoft.com/de-de/azure/devops/pipelines/process/variables?view=azure-devops&tabs=yaml%2Cbatch#use-outputs-in-a-different-stage
#
#  jobs:
#  - job: Store
#    displayName: 'Deploy Artifacts'
#    pool:
#      vmImage: 'windows-latest'
#
#    steps:

    - task: PublishBuildArtifacts@1
      displayName: 'Publish Artifact: PreRelease'
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        publishLocation: 'Container'
        ArtifactName: 'PreRelease'
