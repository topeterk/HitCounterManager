#MIT License

#Copyright (c) 2021-2025 Peter Kirmeier

#Permission is hereby granted, free of charge, to any person obtaining a copy
#of this software and associated documentation files (the "Software"), to deal
#in the Software without restriction, including without limitation the rights
#to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
#copies of the Software, and to permit persons to whom the Software is
#furnished to do so, subject to the following conditions:

#The above copyright notice and this permission notice shall be included in all
#copies or substantial portions of the Software.

#THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
#IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
#FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
#AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
#LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
#OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
#SOFTWARE.

# https://aka.ms/yaml
# https://learn.microsoft.com/en-us/azure/devops/pipelines/yaml-schema/?view=azure-pipelines&viewFallbackFrom=azure-devops
# https://learn.microsoft.com/en-us/azure/devops/pipelines/process/expressions?view=azure-devops
# RuntimeRID values: https://docs.microsoft.com/en-us/dotnet/core/rid-catalog
# Available Software on Agents: https://learn.microsoft.com/en-us/azure/devops/pipelines/agents/hosted?view=azure-devops&tabs=yaml#software

trigger:
- v2.x

variables:
- group: androidKeyStoreVars

stages:
- stage: Build

  jobs:
  - job:
    strategy:
      maxParallel: 4
      matrix:
# Most Used
        win-x64:
          PoolVmImg: 'windows-latest'
          RuntimeRID: 'win-x64'
          PlatformType: 'Desktop.Win32Forms'
          SelfContained: 'false'
        linux-x64:
          PoolVmImg: 'ubuntu-latest'
          RuntimeRID: 'linux-x64'
          PlatformType: 'Desktop'
          SelfContained: 'false'
        android-arm64:
          PoolVmImg: 'windows-latest'
          RuntimeRID: 'android-arm64'
          PlatformType: 'Android'
          SelfContained: 'true'
        osx-x64:
          PoolVmImg: 'macOS-latest'
          RuntimeRID: 'osx-x64'
          PlatformType: 'Desktop'
          SelfContained: 'false'
# Windows
        win-x86:
          PoolVmImg: 'windows-latest'
          RuntimeRID: 'win-x86'
          PlatformType: 'Desktop.Win32Forms'
          SelfContained: 'false'
        win-arm64:
          PoolVmImg: 'windows-latest'
          RuntimeRID: 'win-arm64'
          PlatformType: 'Desktop.Win32Forms'
          SelfContained: 'false'
# Linux
        linux-musl-x64:
          PoolVmImg: 'ubuntu-latest'
          RuntimeRID: 'linux-musl-x64'
          PlatformType: 'Desktop'
          SelfContained: 'false'
        linux-arm:
          PoolVmImg: 'ubuntu-latest'
          RuntimeRID: 'linux-arm'
          PlatformType: 'Desktop'
          SelfContained: 'false'
        linux-arm64:
          PoolVmImg: 'ubuntu-latest'
          RuntimeRID: 'linux-arm64'
          PlatformType: 'Desktop'
          SelfContained: 'false'
# iOS
#   building using Xcode? https://docs.microsoft.com/en-us/azure/devops/pipelines/ecosystems/xcode?view=azure-devops
#       ios-arm64:
#         PoolVmImg: ??
#         RuntimeRID: 'ios-arm64'
#         PlatformType: ??
#         SelfContained: ??

    variables:
      buildConfiguration: 'Release'

    pool:
      vmImage: '$(PoolVmImg)'

    steps:

    - task: Bash@3
      displayName: 'Assembly Variables'
      env:
        DIR_FILE: '$(Build.SourcesDirectory)/Source/Directory.Build.props'
        PRJ_FILE: '$(Build.SourcesDirectory)/Source/HitCounterManager.$(PlatformType)/HitCounterManager.$(PlatformType).csproj'
      inputs:
        targetType: 'inline'
        script: |
          echo "Parsing '$DIR_FILE' and '$PRJ_FILE' ..."
          PRODUCT_NAME=$(    KEY=Product         ; grep "<${KEY}>" "$DIR_FILE" | tee    Matches.txt | sed                                            -e "s,^.*<${KEY}>\([^<^>]*\)</${KEY}>.*,\1,")
          VERSION_MAJOR=$(   KEY=MajorVersion    ; grep "<${KEY}>" "$DIR_FILE" | tee -a Matches.txt | sed                                            -e "s,^.*<${KEY}>\([^<^>]*\)</${KEY}>.*,\1,")
          VERSION_FULL=$(    KEY=Version         ; grep "<${KEY}>" "$DIR_FILE" | tee -a Matches.txt | sed -e "s,\$(MajorVersion),${VERSION_MAJOR},g" -e "s,^.*<${KEY}>\([^<^>]*\)</${KEY}>.*,\1,")
          TARGET_FRAMEWORK=$(KEY=TargetFramework ; grep "<${KEY}>" "$PRJ_FILE" | tee -a Matches.txt | sed                                            -e "s,^.*<${KEY}>\([^<^>]*\)</${KEY}>.*,\1,")
          APP_ID=$(          KEY=ApplicationId   ; grep "<${KEY}>" "$PRJ_FILE" | tee -a Matches.txt | sed -e "s,\$(Product),${PRODUCT_NAME},g"       -e "s,^.*<${KEY}>\([^<^>]*\)</${KEY}>.*,\1,")
          echo "Matches found:"
          cat Matches.txt
          rm -f Matches.txt
          #
          echo "Pipeline variables:"
          echo "##vso[task.setvariable variable=AssemblyProductAttribute]${PRODUCT_NAME}"
          echo "##vso[task.setvariable variable=AssemblyVersionAttribute]${VERSION_FULL}"
          echo "##vso[task.setvariable variable=AssemblyTargetFrameworkAttribute]${TARGET_FRAMEWORK}"
          echo "##vso[task.setvariable variable=AssemblyApplicationIdAttribute]${APP_ID}"
          echo "  AssemblyProductAttribute         =" ${PRODUCT_NAME}
          echo "  AssemblyVersionAttribute         =" ${VERSION_FULL}
          echo "  AssemblyTargetFrameworkAttribute =" ${TARGET_FRAMEWORK}
          echo "  AssemblyApplicationIdAttribute   =" ${APP_ID}

# Available versions: https://github.com/dotnet/core/blob/main/release-notes/releases-index.json
    - task: UseDotNet@2
      displayName: 'Install .NET 8'
      inputs:
        version: '8.x'

# Available versions: https://dist.nuget.org/tools.json
    - task: NuGetToolInstaller@1
      displayName: 'Install NuGet 6'
      inputs:
        versionSpec: '6.x'

    - task: DotNetCoreCLI@2
      condition: startsWith(variables['RuntimeRID'], 'android-')
      displayName: 'Install Android SDK'
      inputs:
        command: 'custom'
        custom: 'workload'
        arguments: 'install android'

# https://learn.microsoft.com/en-us/azure/devops/pipelines/tasks/reference/java-tool-installer-v0?view=azure-pipelines
    - task: JavaToolInstaller@0
      condition: startsWith(variables['RuntimeRID'], 'android-')
      displayName: 'Install Java 11'
      inputs:
        versionSpec: '11'
        jdkArchitectureOption: 'x64'
        jdkSourceOption: 'PreInstalled'

# Keystore generated with:
#   keytool -genkeypair -v -keystore android.keystore -alias hcmkey -keyalg RSA -keysize 2048 -validity 36500
# List keys in keystore:
#   keytool -list -keystore android.keystore
# See certificate by dumping the certificate:
#   keytool -exportcert -keystore android.keystore -alias hcmkey -file hcmkey.cer
# Download only required in case the task doesn't support download of the file by its own
#    - task: DownloadSecureFile@1
#      condition: startsWith(variables['RuntimeRID'], 'android-')
#      displayName: 'Download Android KeyStore SecureFile'
#      name: androidKeyStoreSecureFile
#      inputs:
#        secureFile: 'android.keystore' # files is stored at $(androidKeyStoreSecureFile.secureFilePath)

# example:  dotnet publish --configuration Release --runtime win-x64       --self-contained false HitCounterManager.Desktop\HitCounterManager.Desktop.csproj
# example:  dotnet publish --configuration Release --runtime android-arm64 --self-contained true  HitCounterManager.Android\HitCounterManager.Android.csproj

    - task: DotNetCoreCLI@2
      displayName: 'DotNet Publish'
      inputs:
        command: 'publish'
        arguments: '--configuration $(buildConfiguration) --runtime $(RuntimeRID) --self-contained $(SelfContained)'
        publishWebProjects: false
        zipAfterPublish: false
        projects: '**/*.$(PlatformType).csproj'

    - task: Bash@3
      condition: startsWith(variables['RuntimeRID'], 'android-')
      displayName: 'Friendly APK name'
      inputs:
        targetType: 'inline'
        script: |
          echo "Apply friendly APK file name in $(pwd) ..."
          echo "Original: $(AssemblyApplicationIdAttribute).apk"
          echo "Friendly: $(Build.DefinitionName).$(System.JobName)-$(AssemblyVersionAttribute)-PreRelease.apk"
          cp "$(AssemblyApplicationIdAttribute).apk" "$(Build.DefinitionName).$(System.JobName)-$(AssemblyVersionAttribute)-PreRelease.apk"
        workingDirectory: '$(Build.SourcesDirectory)/Source/$(AssemblyProductAttribute).$(PlatformType)/bin/$(buildConfiguration)/$(AssemblyTargetFrameworkAttribute)/$(RuntimeRID)'

# example signing check:  "C:\Program Files (x86)\Android\android-sdk\build-tools\32.0.0\apksigner.bat" verify --verbose --print-certs "HitCounterManager.android-arm64-2.0.0.0-PreRelease.apk"
    - task: AndroidSigning@3
      condition: startsWith(variables['RuntimeRID'], 'android-')
      displayName: 'Signing APK'
      inputs:
        apkFiles: '$(Build.SourcesDirectory)/Source/$(AssemblyProductAttribute).$(PlatformType)/bin/$(buildConfiguration)/$(AssemblyTargetFrameworkAttribute)/$(RuntimeRID)/$(Build.DefinitionName).$(System.JobName)-$(AssemblyVersionAttribute)-PreRelease.apk'
        apksignerKeystoreFile: 'android.keystore'
        apksignerKeystoreAlias: 'hcmkey'
        apksignerKeystorePassword: '$(androidKeyStorePassword)'
        apksignerKeyPassword: '$(androidKeyStorePassword)'

    - task: Bash@3
      displayName: 'Dump file tree'
      inputs:
        targetType: 'inline'
        script: |
          echo "Listing '$(Build.SourcesDirectory)' ..."
          find -L . -type f

    - task: ArchiveFiles@2
      condition: startsWith(variables['RuntimeRID'], 'win-')
      displayName: 'Archive ZIP'
      inputs:
        rootFolderOrFile: '$(Build.SourcesDirectory)/Source/$(AssemblyProductAttribute).$(PlatformType)/bin/$(buildConfiguration)/$(AssemblyTargetFrameworkAttribute)/$(RuntimeRID)/publish/'
        includeRootFolder: false
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.DefinitionName).$(System.JobName)-$(AssemblyVersionAttribute)-PreRelease.zip'
        archiveType: 'zip'
        replaceExistingArchive: true
        verbose: true

    - task: ArchiveFiles@2
      condition: startsWith(variables['RuntimeRID'], 'android-')
      displayName: 'Archive APK.ZIP'
      inputs:
        rootFolderOrFile: '$(Build.SourcesDirectory)/Source/$(AssemblyProductAttribute).$(PlatformType)/bin/$(buildConfiguration)/$(AssemblyTargetFrameworkAttribute)/$(RuntimeRID)/$(Build.DefinitionName).$(System.JobName)-$(AssemblyVersionAttribute)-PreRelease.apk'
        includeRootFolder: false
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.DefinitionName).$(System.JobName)-$(AssemblyVersionAttribute)-PreRelease.zip'
        archiveType: 'zip'
        replaceExistingArchive: true
        verbose: true

    - task: ArchiveFiles@2
      condition: or(startsWith(variables['RuntimeRID'], 'linux-'), startsWith(variables['RuntimeRID'], 'osx-'))
      displayName: 'Archive TAR.GZ'
      inputs:
        rootFolderOrFile: '$(Build.SourcesDirectory)/Source/$(AssemblyProductAttribute).$(PlatformType)/bin/$(buildConfiguration)/$(AssemblyTargetFrameworkAttribute)/$(RuntimeRID)/publish/'
        includeRootFolder: false
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.DefinitionName).$(System.JobName)-$(AssemblyVersionAttribute)-PreRelease.tar.gz'
        archiveType: 'tar'
        tarCompression: 'gz'
        replaceExistingArchive: true
        verbose: true

#https://docs.microsoft.com/en-us/azure/devops/pipelines/tasks/build/dotnet-core-cli?view=azure-devops

#- stage: Deploy
#  dependsOn: Build
#
# https://docs.microsoft.com/de-de/azure/devops/pipelines/process/variables?view=azure-devops&tabs=yaml%2Cbatch#use-outputs-in-a-different-stage
#
#  jobs:
#  - job: Store
#    displayName: 'Deploy Artifacts'
#    pool:
#      vmImage: 'windows-latest'
#
#    steps:

    - task: PublishBuildArtifacts@1
      displayName: 'Publish Artifact: PreRelease'
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        publishLocation: 'Container'
        ArtifactName: 'PreRelease'
